/******************************************************************************\
 * Copyright (C) 2012-2013 Leap Motion, Inc. All rights reserved.               *
 * Leap Motion proprietary and confidential. Not for distribution.              *
 * Use subject to the terms of the Leap Motion SDK Agreement available at       *
 * https://developer.leapmotion.com/sdk_agreement, or another agreement         *
 * between Leap Motion and you, your company or other organization.             *
\******************************************************************************/

import java.io.FileInputStream;
import java.io.IOException;
import java.lang.Math;

import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

import com.leapmotion.leap.*;
import com.leapmotion.leap.Gesture.State;

class SampleListener extends Listener {
	private static int frame = 0;

	public void onInit(Controller controller) {
		System.out.println("Initialized");
	}

	public void onConnect(Controller controller) {
		System.out.println("Connected");
		/*controller.enableGesture(Gesture.Type.TYPE_SWIPE);
        controller.enableGesture(Gesture.Type.TYPE_CIRCLE);
        controller.enableGesture(Gesture.Type.TYPE_SCREEN_TAP);
        controller.enableGesture(Gesture.Type.TYPE_KEY_TAP);*/
	}

	public void onDisconnect(Controller controller) {
		//Note: not dispatched when running in a debugger.
		System.out.println("Disconnected");
	}

	public void onExit(Controller controller) {
		System.out.println("Exited");
	}

	public void onFinger(int Fingers){
		try{ 
			AudioPlayer p = AudioPlayer.player;
			AudioStream as;
			switch(Fingers){
			case 1: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/1.wav"));
			p.start(as);
			break;
			case 2: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/2.wav"));
			p.start(as);
			break;
			case 3: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/3.wav"));
			p.start(as);
			break;
			case 4: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/4.wav"));
			p.start(as);
			break;
			case 5: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/5.wav"));
			p.start(as);
			break;
			case 6: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/6.wav"));
			p.start(as);
			break;
			case 7: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/7.wav"));
			p.start(as);
			break;
			case 8: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/8.wav"));
			p.start(as);
			break;
			case 9: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/9.wav"));
			p.start(as);
			break;
			case 10: 	as = new AudioStream(new FileInputStream("I:/Eclipse Projects/SignLanguageStuff/10.wav"));
			p.start(as);
			break;
			}

		}
		catch(IOException IOE){}
	} 

	public void onFrame(Controller controller) {
		//System.out.println("Frame # = " + frame);
		//frame+=1;

		// Get the most recent frame and report some basic information
		Frame frame = controller.frame();
		/*System.out.println("Frame id: " + frame.id()
                         + ", timestamp: " + frame.timestamp()
                         + ", hands: " + frame.hands().count()
                         + ", fingers: " + frame.fingers().count()
                         + ", tools: " + frame.tools().count()
                         + ", gestures " + frame.gestures().count());*/

		if (!frame.hands().isEmpty()) {
			// Get the first hand
			Hand hand = frame.hands().get(0);

			// Check if the hand has any fingers
			FingerList fingers = hand.fingers();
			if (!fingers.isEmpty()) {
				// Calculate the hand's average finger tip position
				Vector avgPos = Vector.zero();
				for (Finger finger : fingers) {
					avgPos = avgPos.plus(finger.tipPosition());
				}
				avgPos = avgPos.divide(fingers.count());
				/*System.out.println("Hand has " + fingers.count()
                                 + " fingers, average finger tip position: " + avgPos);*/
				System.out.println("Fingers = " + frame.fingers().count());
				onFinger(frame.fingers().count());

			}

			// Get the hand's sphere radius and palm position
			/*System.out.println("Hand sphere radius: " + hand.sphereRadius()
                             + " mm, palm position: " + hand.palmPosition());*/

			// Get the hand's normal vector and direction
			/*Vector normal = hand.palmNormal();
            Vector direction = hand.direction();*/

			// Calculate the hand's pitch, roll, and yaw angles
			/*System.out.println("Hand pitch: " + Math.toDegrees(direction.pitch()) + " degrees, "
                             + "roll: " + Math.toDegrees(normal.roll()) + " degrees, "
                             + "yaw: " + Math.toDegrees(direction.yaw()) + " degrees");*/
		}

		GestureList gestures = frame.gestures();
		for (int i = 0; i < gestures.count(); i++) {
			Gesture gesture = gestures.get(i);

			switch (gesture.type()) {
			case TYPE_CIRCLE:
				CircleGesture circle = new CircleGesture(gesture);

				// Calculate clock direction using the angle between circle normal and pointable
				String clockwiseness;
				if (circle.pointable().direction().angleTo(circle.normal()) <= Math.PI/4) {
					// Clockwise if angle is less than 90 degrees
					clockwiseness = "clockwise";
				} else {
					clockwiseness = "counterclockwise";
				}

				// Calculate angle swept since last frame
				double sweptAngle = 0;
				if (circle.state() != State.STATE_START) {
					CircleGesture previousUpdate = new CircleGesture(controller.frame(1).gesture(circle.id()));
					sweptAngle = (circle.progress() - previousUpdate.progress()) * 2 * Math.PI;
				}

				System.out.println("Circle id: " + circle.id()
						+ ", " + circle.state()
						+ ", progress: " + circle.progress()
						+ ", radius: " + circle.radius()
						+ ", angle: " + Math.toDegrees(sweptAngle)
						+ ", " + clockwiseness);
				break;
			case TYPE_SWIPE:
				SwipeGesture swipe = new SwipeGesture(gesture);
				System.out.println("Swipe id: " + swipe.id()
						+ ", " + swipe.state()
						+ ", position: " + swipe.position()
						+ ", direction: " + swipe.direction()
						+ ", speed: " + swipe.speed());
				break;
			case TYPE_SCREEN_TAP:
				ScreenTapGesture screenTap = new ScreenTapGesture(gesture);
				System.out.println("Screen Tap id: " + screenTap.id()
						+ ", " + screenTap.state()
						+ ", position: " + screenTap.position()
						+ ", direction: " + screenTap.direction());
				break;
			case TYPE_KEY_TAP:
				KeyTapGesture keyTap = new KeyTapGesture(gesture);
				System.out.println("Key Tap id: " + keyTap.id()
						+ ", " + keyTap.state()
						+ ", position: " + keyTap.position()
						+ ", direction: " + keyTap.direction());
				break;
			default:
				System.out.println("Unknown gesture type.");
				break;
			}
		}

		if (!frame.hands().isEmpty() || !gestures.isEmpty()) {
			System.out.println();
		}
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

class Sample {
	public static void main(String[] args) {
		int frame = 0;
		// Create a sample listener and controller
		SampleListener listener = new SampleListener();
		Controller controller = new Controller();

		// Have the sample listener receive events from the controller
		controller.addListener(listener);

		// Keep this process running until Enter is pressed
		System.out.println("Press Enter to quit...");
		try {
			System.in.read();
		} catch (IOException e) {
			e.printStackTrace();
		}

		// Remove the sample listener when done
		controller.removeListener(listener);
	}
}
